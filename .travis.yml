language: node_js
node_js:
- 10.15.3
sudo: true
branches:
  only:
  - master
  - "/^v\\d+\\.\\d+(\\.\\d+)?(-\\S*)?$/"
before_install:
- npm i -g npm@6.9.0
- npm config set //registry.npmjs.org/:_authToken=$NPM_TOKEN
jobs:
  include:
  - stage: eslint
    name: eslint
    script: npm run eslint
  - stage: Unit tests
    script:
    - npm run test-unit
  - stage: Integration tests
    script:
    - sudo /etc/init.d/mysql stop
    - git clone https://github.com/streamr-dev/streamr-docker-dev.git
    - sudo ifconfig docker0 10.200.10.1/24
    - "$TRAVIS_BUILD_DIR/streamr-docker-dev/streamr-docker-dev/bin.sh start engine-and-editor"
    - sleep 3m
    - node node_modules/@streamr/streamr-p2p-network/bin/tracker.js &
    - npm run test-integration
  - stage: Deploy Staging
    script:
    - mkdir $TRAVIS_BUILD_DIR/build
    - mkdir $TRAVIS_BUILD_DIR/upload
    - cp -r src  build
    - cp app.js build
    - cp package.json build
    - cp package-lock.json build
    - mv .codedeploy/appspec.yml build/appspec.yml
    - mv .codedeploy/ build/
    - cd build; tar -czvf $TRAVIS_BUILD_DIR/upload/broker-${TRAVIS_JOB_ID}.tar .;
      tar -czvf $TRAVIS_BUILD_DIR/upload/latest.tar .;
    - cd $TRAVIS_BUILD_DIR;
  - stage: Build docker (dev)
    if: tag IS blank
    install: true
    env:
    - OWNER=streamr
    - IMAGE_NAME=broker-node
    - TAG=dev
    script:
    - docker build -t $OWNER/$IMAGE_NAME:$TAG --build-arg NPM_TOKEN=${NPM_TOKEN} .
    deploy:
    - provider: script
      script: bash .travis_scripts/deploy_docker.sh staging
  - stage: publish
    if: tag IS present
    script: npm publish
env:
  global:
  - secure: RiL1ul75w9pMGsimDPCm9OBzj8gdQZEl8jimBWpzS27/aoPOTu2Z0RkGPSaEvqOmSdcy5FsfKQUQgq9H6yesrBbDuJcN3jjm53DWmMZCua+JdoL1ySRBVMJo1oPTUTjw7seWAshVYbY6qHbG9GUcyd095wH07ykhq8aEXywl5mrrTdzyMg8+K2XvyrTBil6RzJ+bQcNtnDgksVnpGEqzqnw3iCzcgSSv25r/mlRxcggsah7lsoaOd4zHCYxl3VFcZgZRc2PYNK3BkWrarTFnTIXTEmikO9JFLoARmrBIgxJo9WEae4HYus4qy9Q+fGMxlAt3Ce55MQavQuiL9QpspPHFbvAJnur0PLGVNq6ChS4pz7C6L5dSO9QV6kVxoyVumlHExWvF4xr3mb1LQcb/Svt8DCk2cf9n//QXg3z7Em0kd77diVAoPpR00PSOVR4Y2CXXURfaVzKjTRfUV4lvVbiYR5Ox+RwsDIYLKsZZNYd2mj8Dj+5dq9RfMqk9qMYQ12ypY21dpgCDKoUdmtv7Y5+72v1OK6xRi1Hx9g2Nth2lp4mpJ2aBv4vzGJLG4DHtjv8Er8wpwmAyuSqVQmjRV75v6YintLr2Iu5aXejrtApEybiR0mGXNXRYM6iTkBnhAw8iVlC3Nk2AWpKkaPL3vWh+g6eXLlliTGHZHMxuXVM=
  - secure: lL103oLdM8ty56rJPyxKKAGDUFz1B8hyFGicHm72QiC3jacxk+RVZaDk5zg1cn6VdC4qYaYstMh4jHKJGRH3UxMzGBCm+Bbkzt5OEDJfs63tR0QA2KtUn9rO2w3fh8PyREee8DLjiJa3dVk8Sr4LxdFWUzNy+1VdMP5VEuLq9+KMBzOXHkFIy5z7DMoUjq2d19PWuLB7yC+fbYesG4/SU/8s3shuRc/CaUw/d7CZh27raGlSeHEFLBfaefbWmEZyWIi4yYPP/6BFDocBBp4QaIGtj2llvoHe8sw19I3Xqx4f9yvNmDFU8yATT6JFyf/SFj/of39+c+Ne+rbEmZ1SBaCDpMUIMCw6kxLZJQd0zZ7jso+4JR4i3KBAnmxcOFMCoWVOatHUoVU25iN1H7AAArVWzoRQoRgOUbhvV0InA58f7uOnDqxfPZ7hTduK4dA1KiBtt16iFHaZskssCxgw2CnZtUNLodbjUIvIGZ7SKKl0JgHIyjYR71DVX5040PE5m9A9uKtcIECYg6eKVPs7T48LqZDFa1XcfBSEvNu3SViSoOlJ6ghH29uxYr5MOhn6GM4i4Ajf79ZltiJcUP1qXNV6IiT7Kq6q7mZCqYUMV75bkRJBPyNPxeX/paYlKih0suid57uLttO6Icp3JeUHBo5bbiIV2eNeX5hGoG+zHd0=
  - secure: pNFIU1b/Oz+wJ5laYwB1xGJsFvL+Q//o88Bd3sIhEupbcXv1DAVcPjXdGS15JYLaxHocLX3UzAZQsSMx+v6ktyytOFxEcgvkOsqQOeJsr4IxtRrwFC6BlfcmpM5L3bwyz8vLqCslQ8EVaOvV9mGpPOGLJLLHrqx85UKpNBfbtOzzo++VWuHzg5aQ84Exc3q7Ii0e1k2ZSdF80/t8ZA0DX+37rf8EZTBO1jvKENFJX3RRiE2Q92ICxD5QOd/iVxTTqlAsURJPOjXKx5BWwQx1GwTOY3ny0wEq1Vg1bsLU5nmupArhshEgYveG31LlGABk3ocu7wT9b8RpE+ZyKorjYNq1//K/pcxZcKrMellhvvcYqDcvUc1GaRPZ5aQi+dmvZeVeGuyDDj1RkLPPDKi/SqMj8PIOSs26oa/LYnz/sn4X3uw/NYFIqkBoeAZz9MGTjSm8GLxtk6PFzTPtlanA+k7MsSLgX/1Y0YgrBdRU3pLh2xHnYZGhE3ZCnq6Utnz+RI+3slTFKC9dZb4l+lQTNx/cLvRhnkRCJ5syQZVPxjWbOgOz9zjOZb//75eIbPsotwHpk0e3KR5fwmMYua5Gm8rtntw9RVkG8IMPx2rxO7xEhHVctdudUVWXIyVuQQJvwOKcN2zRGxiHQVmkrhwzJeG7rpsDDgotK9nFjgRofKw=
