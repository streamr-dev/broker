name: CI & CD

on: [push]

jobs:
  integration:
    name: Run eslint and test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 14.x ]
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache Node.js modules
        uses: actions/cache@v2.1.4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - run: npm ci
      - run: npm run eslint
      - run: npm run build --if-present
      - run: npm run test-unit
      - name: Cache Docker layers
        uses: actions/cache@v2.1.4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.1.1
        with:
          driver-opts: |
            network=host
      - name: Build Dockerfile
        uses: docker/build-push-action@v2.3.0
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          load: true
          tags: streamr/broker-node:dev
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Start Streamr Docker Stack
        uses: streamr-dev/streamr-docker-dev-action@v1.0.0-alpha.3
        with:
          services-to-start: "engine-and-editor cassandra nginx"
      - run: npm run test-integration
        env:
          CI: true
          LOG_LEVEL: warn

  deployment-docker:
    needs: [integration]
    name: Build, test, and publish Docker images
    runs-on: ubuntu-latest

    # run job only for master and tags
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Cache Docker layers
        uses: actions/cache@v2.1.4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Start Streamr Docker Stack
        uses: streamr-dev/streamr-docker-dev-action@v1.0.0-alpha.3
        with:
          services-to-start: "broker-node-no-storage-1 parity-node0"
      - name: Build
        uses: docker/build-push-action@v2.3.0
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          load: true
          tags: streamr/broker-node:dev
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - run: |
          for (( i=0; i < 5; i=i+1 )); do
              curl -s http://localhost:8791/api/v1/volume;
              res=$?;
              if test "$res" != "0"; then
                  echo "Attempting to connect to broker retrying in $wait_time seconds";
                  sleep $wait_time;
                  wait_time=$(( 2*wait_time )) ;
              else
                  exit 0
              fi;
          done;
          exit 1
      - uses: docker/login-action@v1.8.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v2.2.1
        with:
          images: streamr/broker-node
          tags: |
            type=sha
            type=ref,event=branch
            type=semver,pattern=v{{version}}
            type=raw,value=dev
          flavor: |
            latest=auto
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.1.1
        with:
          driver-opts: |
            network=host
      - name: Build
        uses: docker/build-push-action@v2.3.0
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          load: false
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  deployment:
    needs: [integration]
    name: Publishing master using Node 14
    runs-on: ubuntu-latest

    # run job only for tags and skip for cron
    if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'schedule'
    steps:
      - name: Get the release version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - uses: actions/checkout@v2.3.4
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: 14
          registry-url: https://registry.npmjs.org/

      - name: Cache Node.js modules
        uses: actions/cache@v2.1.4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      - name: npm ci
        run: |
          npm ci
          npm run build --if-present

      - name: Publish beta ${{ steps.get_version.outputs.VERSION }}
        # if tag includes beta keyword
        if: contains(steps.get_version.outputs.VERSION, 'beta') == true
        run: npm publish --tag beta
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish latest ${{ steps.get_version.outputs.VERSION }}
        # if tag doesn't include beta keyword
        if: contains(steps.get_version.outputs.VERSION, 'beta') == false
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
