name: Test, Eslint and Publish

on:
  push:
    tags:
      - '*'
    branches:
      - master
  pull_request:
    branches:
      - '*'
  schedule:
    # run every day at 00:00
    - cron:  '0 0 * * *'

jobs:
  eslint:
    name: Run eslint using Node 14
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: npm run eslint
        run: |
          npm ci
          npm run eslint

  test:
    name: Testing using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: npm ci
        run: npm ci

      - name: test-unit
        run: npm run test-unit

      - name: setup streamr-docker-dev
        run: |
          sudo service mysql stop
          git clone https://github.com/streamr-dev/streamr-docker-dev.git
          sudo ifconfig docker0 10.200.10.1/24
          ${GITHUB_WORKSPACE}/streamr-docker-dev/streamr-docker-dev/bin.sh start --except tracker-1 --except tracker-2 --except tracker-3 --except broker-node-no-storage-1 --except broker-node-no-storage-2 --except broker-node-storage-1 --wait

      - name: test-integration
        run: npm run test-integration

#  streamr-client-testing-tool:
#    needs: [test, eslint]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Use Node.js 12
#        uses: actions/setup-node@v1
#        with:
#          node-version: '12.x'
#      - uses: actions/checkout@v1
#      - name: streamr-client tool test
#        continue-on-error: true
#        run: |
#          sudo service mysql stop
#          if [ ! -d streamr-docker-dev ]; then # Skip clone on subsequent attemps.
#           git clone https://github.com/streamr-dev/streamr-docker-dev.git
#          fi
#          sudo ifconfig docker0 10.200.10.1/24
#          ${GITHUB_WORKSPACE}/streamr-docker-dev/streamr-docker-dev/bin.sh start smart-contracts-init nginx engine-and-editor --wait
#          echo "Testing Tool setup"
#          git clone https://github.com/streamr-dev/streamr-client-testing.git
#          cd ${GITHUB_WORKSPACE}/streamr-client-testing
#          echo "Setup package.json to use PR JS client"
#          sed -i "s/com.streamr:client:1.3.0/com.streamr:client:+/g" build.gradle
#          sed -i "s/\"streamr-client\": \"\^3.1.2\"/\"streamr-client\":\"PATH\"/g" package.json
#          ## fix for escaping / of workspace path
#          sed -i "s|"PATH"|"${GITHUB_WORKSPACE}"|g" package.json
#          echo "Prepare for test"
#          ## npm install is used because package-lock.json could be form a previous client version.
#          npm install
#          ./gradlew fatjar
#          echo "Run streamr-client test"
#          java -jar build/libs/client_testing-1.0-SNAPSHOT.jar -s stream-encrypted-shared-rotating-signed -m test
#
#  publish:
#    needs: [test, eslint]
#    name: Publishing master using Node 12
#    runs-on: ubuntu-latest
#
#    # run job only for tags and skip for cron
#    if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'schedule'
#    steps:
#      - name: Get the release version
#        id: get_version
#        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
#
#      - uses: actions/checkout@master
#      - uses: actions/setup-node@v1
#        with:
#          node-version: 12
#          registry-url: https://registry.npmjs.org/
#
#      - name: npm ci
#        run: |
#          npm ci
#          npm run build --if-present
#
#      - name: Publish beta ${{ steps.get_version.outputs.VERSION }}
#        # if tag includes beta keyword
#        if: contains(steps.get_version.outputs.VERSION, 'beta') == true
#        run: npm publish --tag beta
#        env:
#          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
#
#      - name: Publish latest ${{ steps.get_version.outputs.VERSION }}
#        # if tag doesn't include beta keyword
#        if: contains(steps.get_version.outputs.VERSION, 'beta') == false
#        run: npm publish
#        env:
#          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}